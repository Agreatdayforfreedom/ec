// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
	ADMIN
	USER
}

model User {

  id       String @id @default(cuid())
  username String
  email    String
  password String

	role Role @default(USER)

	cart 		 Cart 	@relation(fields: [cartId], references: [id])
	cartId   String @unique 

	reviews  Reviews[]

  @@map("user")
}


model Product {
  id          String @id @default(cuid())
  title       String
  description String?
  author      String 
  image       String
  price       Int   
  stock       Int 	 @default(1)

  metadata    Metadata?

	cart_item   Cart_Item?
	
	reviews 		Reviews[]

  @@map("product")
}

model Cart_Item {
	id   	     String  @id @default(cuid())
	qty        Int     @default(1)
	totalPrice Int

	product    Product @relation(fields: [productId], references: [id])
	productId  String  @unique

	cart    	 Cart    @relation(fields: [cartId], references: [id])
	cartId  	 String 

	@@map("cart_item")
}

model Cart {
	id	  String @id @default(cuid())

	user  User?
	
	items Cart_Item[]

	@@map("cart")
}

enum Cover {
  HARDCOVER
  PAPERBACK
}

model Metadata {
  id        String   @id @default(cuid())
  pages     Int      @default(1)
  publisher String
  language  String?
  cover     Cover    @default(PAPERBACK)
  year      DateTime @default(now())
  isbn      String?

  product   Product  @relation(fields: [productId], references: [id])
  productId String   @unique

  @@map("metadata")
}

model Reviews {
	id 				 String 	@id @default(cuid())
	stars 		 Int
	text 			 String 

	created_at DateTime @default(now())
	updated_at DateTime @updatedAt

	user 			 User     @relation(fields: [userId], references: [id])
	userId  	 String 

	product		 Product  @relation(fields: [productId], references: [id])
	productId  String

	@@map("reviews")
}