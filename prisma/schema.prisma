// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
	ADMIN
	USER
}

model User {

  id       String @id @default(cuid())
  username String
  email    String
  password String

	gems 		 Int 		@default(1000)	

	role 	   Role 			@default(USER)

	cart 		 Cart 	@relation(fields: [cartId], references: [id])
	cartId   String @unique 

	reviews  Reviews[]

	orders 	 Order[]

  @@map("user")
}


model Product {
  id          String @id @default(cuid())
  title       String
  description String?
  author      String 
  image       String
  price       Int   
  stock       Int 	 @default(1)
	gems_price  Int	
  metadata    Metadata?

	cart_item   Cart_Item?
	
	order_item  Order_Item[] 

	rating   		Rating @relation(fields: [ratingId], references: [id], onDelete: Cascade)  
	ratingId 		String @unique

	saga   			Saga?   @relation(fields: [sagaId], references: [id])
	sagaId   		String?

	order 			Int?

  @@map("product")
}

model Cart_Item {
	id   	     String  @id @default(cuid())
	qty        Int     @default(1)
	totalPrice Int
	totalGems  Int

	product    Product @relation(fields: [productId], references: [id])
	productId  String  @unique

	cart    	 Cart    @relation(fields: [cartId], references: [id])
	cartId  	 String 

	@@map("cart_item")
}

model Cart {
	id	  String @id @default(cuid())

	user  User?
	
	items Cart_Item[]

	@@map("cart")
}

enum Cover {
  HARDCOVER
  PAPERBACK
}

enum OrderStatus {
	PENDING
	PURCHASED
}

model Order {
	id 				    String 			@id @default(cuid())
	subtotal      Int
	subtotal_gems Int
	totalItems    Int

	orderStatus   OrderStatus @default(PENDING)

	user 				  User 				@relation(fields: [userId], references: [id])
	userId 			  String 			

	order_items		Order_Item[]

	@@map("order")
}

model Order_Item {
	id   	     String  @id @default(cuid())
	qty        Int     
	totalPrice Int
	totalGems  Int

	product    Product @relation(fields: [productId], references: [id])
	productId  String  

	order    	 Order   @relation(fields: [orderId], references: [id])
	orderId  	 String

	@@map("order_item")
}


model Metadata {
  id        String   @id @default(cuid())
  pages     Int      @default(1)
  publisher String
  language  String?
  cover     Cover    @default(PAPERBACK)
  year      DateTime @default(now())
  isbn      String?

  product   Product  @relation(fields: [productId], references: [id])
  productId String   @unique

  @@map("metadata")
}

model Saga {
	id 					String @id @default(cuid())
	name  			String
	description String

	products 		Product[]
}

model Rating {
	id 		  String @id @default(cuid())
	avg 	  Float

	reviews Reviews[]

	product Product?

	@@map("rating")
}

model Reviews {
	id 				 String 	@id @default(cuid())
	stars 		 Int
	text 			 String 

	created_at DateTime @default(now())
	updated_at DateTime @updatedAt

	user 			 User     @relation(fields: [userId], references: [id])
	userId  	 String 

	rating		Rating @relation(fields: [ratingId], references: [id], onDelete: Cascade)
	ratingId  String

	@@map("reviews")
}